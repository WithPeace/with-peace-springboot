spring:
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB
  web:
    resources:
      add-mappings: false
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/withpeace?useSSL=false&serverTimezone=Asia/Seoul&useLegacyDatetimeCode=false&allowPublicKeyRetrieval=true
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    hikari:
      pool-name: jpa-hikari-pool
      maximum-pool-size: 5
      jdbc-url: ${spring.datasource.url}
      username: ${spring.datasource.username}
      password: ${spring.datasource.password}
      driver-class-name: ${spring.datasource.driver-class-name}
      idle-timeout: 300
      max-lifetime: 300
      data-source-properties:
        rewriteBatchedStatements: true
  jpa:
    open-in-view: false
    database: mysql
    generate-ddl: true
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        hbm2ddl.import_files_sql_extractor: org.hibernate.tool.hbm2ddl.MultipleLinesSqlCommandExtractor
        current_session_context_class: org.springframework.orm.hibernate5.SpringSessionContext
        default_batch_fetch_size: ${chunkSize:100}
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true
        format_sql: true
        jdbc.time_zone: Asia/Seoul
  jackson:
    time-zone: Asia/Seoul
  # Security OAuth2 설정
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${OAUTH_CLIENT_ID}
            client-secret: ${OAUTH_CLIENT_SECRET}
            redirect-uri: http://localhost:8080/login/oauth2/code/google
            scope:
              - email
  # Google Cloud Storage
  cloud:
    gcp:
      storage:
        credentials:
          location: classpath:with-peace-801b6-89c6377f475e.json
        project-id: "with-peace-801b6"
        bucket: "cheong-ha-bucket"

# Hibernate SQL 바인딩 로그 활성화
# logging:
#   level:
#     org.hibernate.SQL: DEBUG
#     org.hibernate.orm.jdbc.bind: TRACE  # 바인딩된 값 로그 활성화
#     org.hibernate.orm.jdbc.extract: TRACE  # 추출된 값 로그 활성화
#     org.springframework.jdbc.core.JdbcTemplate: DEBUG  # Spring JDBC SQL 로그 활성화
#     org.springframework.jdbc.core.StatementCreatorUtils: TRACE  # PreparedStatement 값 로그 활성화

logging:
  level:
    org.springframework.transaction: WARN
    org.springframework.orm.jpa: WARN

client:
  provider:
    kakao:
      authorization-uri: https://kauth.kakao.com/oauth/authorize
      token-uri: https://kauth.kakao.com/oauth/token
      user-info-uri: https://kapi.kakao.com/v2/user/me
    google:
      authorization-uri: "https://accounts.google.com/o/oauth2/v2/auth"
      token-uri: "https://oauth2.googleapis.com/token"
      user-info-uri: "https://www.googleapis.com/userinfo/v2/me"

springdoc:
  swagger-ui:
    operations-sorter: method # HTTP 메소드 순으로 정렬 (DELETE, GET, PATCH, POST, PUT)

jwt.secret: ${JWT_SECRET}
slack.webhook.url: https://hooks.slack.com/services/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

youth-policy.api-key: 7054b4c5-9db8-410a-8582-9ee5b55c1e59

file:
  regionCodeDataPath: "/app/data/LegalDongCode_List.txt"

management:
  endpoints:
    web:
      exposure:
        include: health, info, metrics, prometheus # 필요한 엔드포인트만 활성화
    # 민감한 엔드포인트 비활성화
    env:
      enabled: false
    heapdump:
      enabled: false
    shutdown:
      enabled: false