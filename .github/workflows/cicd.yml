# github repository actions 페이지에 나타날 이름
name: CI/CD using github actions & docker

# event trigger
on:
  push :
    branches : ["master","dev","staging"]
permissions:
  contents: read

jobs:
  CI_CD:
    runs-on: ubuntu-latest
    steps:
      # JDK setting - github actions에서 사용할 JDK 설정 (프로젝트나 AWS의 java 버전과 달라도 무방)
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # gradle caching - 빌드 시간 향상
      - name: Gradle Caching
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # gradle build
      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew build -x test

      # Docker build & push to staging
      - name: Docker build & push to staging
        if: contains(github.ref, 'staging')
        run: |
          docker login -u ${{secrets.DOCKER_USER}} -p ${{secrets.DOCKER_TOKEN}}
          docker build -t ${{secrets.DOCKER_REPOSITORY}}:staging .
          docker push ${{secrets.DOCKER_REPOSITORY}}:staging

      # Docker build & push to prod
      - name: Docker build & push to prod
        if: contains(github.ref, 'dev')
        run: |
          docker login -u ${{secrets.DOCKER_USER}} -p ${{secrets.DOCKER_TOKEN}}
          docker build -t ${{secrets.DOCKER_REPOSITORY}} .
          docker push ${{secrets.DOCKER_REPOSITORY}}

      # 3. Deploy to staging server
      - name: Deploy to staging
        if: contains(github.ref, 'staging')
        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.STAGING_HOST}}
          username: lpromotion00
          key: ${{ secrets.STAGING_PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
            export DB_USERNAME=${{secrets.DB_USERNAME}}
            export DB_PASSWORD=${{secrets.DB_PASSWORD}}
            export JWT_SECRET=${{secrets.JWT_SECRET}}
            export OAUTH_CLIENT_ID=${{secrets.OAUTH_CLIENT_ID}}
            export OAUTH_CLIENT_SECRET=${{secrets.OAUTH_CLIENT_SECRET}}
            
            sudo docker ps
            sudo docker stop springboot
            sudo docker rm -f springboot
            sudo docker pull ${{secrets.DOCKER_REPOSITORY}}:staging
            
            sudo docker run -d -p 8081:8080 --net=host --name springboot \
            -v /mnt/data/LegalDongCode_List.txt:/app/data/LegalDongCode_List.txt \
            -e TZ=Asia/Seoul \
            -e SPRING_PROFILES_ACTIVE=staging \
            -e DB_USERNAME=${DB_USERNAME} \
            -e DB_PASSWORD=${DB_PASSWORD} \
            -e JWT_SECRET=${JWT_SECRET} \
            -e OAUTH_CLIENT_ID=${OAUTH_CLIENT_ID} \
            -e OAUTH_CLIENT_SECRET=${OAUTH_CLIENT_SECRET} \
            ${{secrets.DOCKER_REPOSITORY}}:staging
            
            sudo docker image prune -f

      # Deploy to prod
      - name: Deploy to prod
        uses: appleboy/ssh-action@master
        id: deploy-prod
        if: contains(github.ref, 'dev')
        with:
          host: ${{secrets.HOST}}
          username: root
          password: ${{secrets.SSH_PASSWORD}}
          port: 22
          key: ${{ secrets.PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
            export DB_USERNAME=${{secrets.DB_USERNAME}}
            export DB_PASSWORD=${{secrets.DB_PASSWORD}}
            export JWT_SECRET=${{secrets.JWT_SECRET}}
            export OAUTH_CLIENT_ID=${{secrets.OAUTH_CLIENT_ID}}
            export OAUTH_CLIENT_SECRET=${{secrets.OAUTH_CLIENT_SECRET}}
      
            sudo docker ps
            sudo docker stop springboot
            sudo docker rm -f springboot
            sudo docker pull ${{secrets.DOCKER_REPOSITORY}}
            
            sudo docker run -d -p 8080:8080 --net=host --name springboot \
            -v /mnt/data/LegalDongCode_List.txt:/app/data/LegalDongCode_List.txt \
            -e TZ=Asia/Seoul \
            -e SPRING_PROFILES_ACTIVE=dev \ 
            -e DB_USERNAME=${DB_USERNAME} \
            -e DB_PASSWORD=${DB_PASSWORD} \
            -e JWT_SECRET=${JWT_SECRET} \
            -e OAUTH_CLIENT_ID=${OAUTH_CLIENT_ID} \
            -e OAUTH_CLIENT_SECRET=${OAUTH_CLIENT_SECRET} \
            ${{secrets.DOCKER_REPOSITORY}}
            
            sudo docker image prune -f
            
