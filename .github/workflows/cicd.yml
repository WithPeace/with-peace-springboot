name: CI/CD using github actions & docker

on:
  push:
    branches: ["master", "dev"]
permissions:
  contents: read

jobs:
  # Step 1: Checkout & JDK Setup
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

  # Step 2: Gradle Caching & Build
  build:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Gradle Caching
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew build -x test
          
      # Save built files as artifacts to pass to other jobs if necessary
      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: build/libs/

  # Step 3: Docker Build & Push
  docker:
    runs-on: ubuntu-latest
    needs: build
    if: contains(github.ref, 'dev')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: build-artifact

      - name: Docker build & push to prod
        run: |
          docker login -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.DOCKER_TOKEN }}
          docker build -t ${{ secrets.DOCKER_REPOSITORY }} .
          docker push ${{ secrets.DOCKER_REPOSITORY }}

  # Step 4: Deploy to Production
  deploy:
    runs-on: ubuntu-latest
    needs: docker
    if: contains(github.ref, 'dev')
    steps:
      - name: Deploy to prod
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: root
          password: ${{ secrets.SSH_PASSWORD }}
          port: 22
          key: ${{ secrets.PRIVATE_KEY }}
          script: |
            sudo docker ps
            sudo docker stop springboot
            sudo docker rm -f springboot
            sudo docker pull ${{ secrets.DOCKER_REPOSITORY }}
            sudo docker run -d -p 8080:8080 --net=host --name springboot ${{ secrets.DOCKER_REPOSITORY }}
            sudo docker image prune -f
